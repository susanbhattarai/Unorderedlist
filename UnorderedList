class Node:
    
    def __init__(self, initvalue):
        self.data = initvalue
        self.next = None
        
    def getdata(self):
        return self.data
        
    def setdata(self, newdata):
        self.data = newdata
    
    def getnext(self):
        return self.next
    
    def setnext(self, newnext):
        self.next = newnext


class UnorderedList:
    
    def __init__(self):
        self.head = None
    
    def isEmpty(self):
        return self.head == None
    
    def __str__(self):
        current  = self.head
        selflist = []
        while current != None:
            selflist.append(current.getdata())
            current = current.getnext()
        return str(selflist)
    
    def add(self, item):
        temp = Node(item)
        temp.setnext(self.head)
        self.head = temp
    
    def size(self):
        current = self.head
        count = 0
        while current != None:
            count = count + 1
            current = current.getnext()
        return count
    
    def search(self, item):
        current = self.head
        found = False
        while not found and current != None:
            if current.getdata() == item:
                found = True
            else:
                current = current.getnext()
        return found
    
    def remove(self,items):
        current = self.head
        previous = None
        found = False
        while not found:
            if current.getdata() == items:
                found = True
            else:
                previous = current
                current = current.getnext()
        if previous == None:
            self.head = current.getnext()
        else:
            previous.setnext(current.getnext())
            
        
    def append(self, items):
        current = self.head
        while current.getnext() != None:
            current = current.getnext()
        current.setnext(Node(items))
